services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres-container-bms
    environment:
      POSTGRES_DB: bms
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    command: [ "postgres", "-c", "max_connections=500" ,"-c","log_statement=all" ]
    ports:
      - "5544:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/data
    networks:
      - bms
    restart: unless-stopped
  # data/postgres_entry.sh

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-container-bms
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "9999:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./seed/pg_exports:/var/lib/pgadmin/storage/admin_admin.com/exports
    networks:
      - bms
    restart: unless-stopped

  pgpool:
    image: bitnami/pgpool:latest
    container_name: pgpool-container-bms
    environment:
      - PGPOOL_BACKEND_NODES=0:postgres:5432
      - PGPOOL_SR_CHECK_USER=myuser
      - PGPOOL_SR_CHECK_PASSWORD=mypassword
      - PGPOOL_POSTGRES_USERNAME=myuser
      - PGPOOL_POSTGRES_PASSWORD=mypassword
      - PGPOOL_NUM_INIT_CHILDREN=20
      - PGPOOL_MAX_POOL=200
      - PGPOOL_ENABLE_LOAD_BALANCE=true
      - PGPOOL_LOAD_BALANCE_MODE=true
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
    depends_on:
      - postgres
    networks:
      - bms
    restart: unless-stopped

  mongo-fs:
    image: mongo:latest
    container_name: mongo-fs-container-bms
    ports:
      #      - 27777:27017
      - "27777:27017"
    volumes:
      - mongo_data:/data/db
      - ./db:/data
    networks:
      - bms
  #  mongorestore --gzip --archive=/data/mongo_export.archive.gz --drop


  postgres-vectors:
    image: pgvector/pgvector:pg16
    container_name: postgres-vectors-container-bms
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: scrape_documents
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data_vectors:/var/lib/postgresql/data
      - ./db:/data
    ports:
      - "5546:5432"
    networks:
      - bms
  #      data/postgres_vector_entry.sh
  pgpool-vectors:
    image: bitnami/pgpool:latest
    container_name: pgpool-vectors-container-bms
    environment:
      - PGPOOL_BACKEND_NODES=0:postgres-vectors:5432
      - PGPOOL_SR_CHECK_USER=myuser
      - PGPOOL_SR_CHECK_PASSWORD=mypassword
      - PGPOOL_POSTGRES_USERNAME=myuser
      - PGPOOL_POSTGRES_PASSWORD=mypassword
      - PGPOOL_NUM_INIT_CHILDREN=10
      - PGPOOL_MAX_POOL=250
      - PGPOOL_ENABLE_LOAD_BALANCE=true
      - PGPOOL_LOAD_BALANCE_MODE=true
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
    depends_on:
      - postgres-vectors
    networks:
      - bms
    restart: unless-stopped

  # utilites
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin-container-bms
    ports:
      - "9411:9411"
    environment:
      STORAGE_TYPE: mysql
      MYSQL_HOST: mysql-zipkin
      MYSQL_USER: zipkin
      MYSQL_PASS: zipkin
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      mysql-zipkin:
        condition: service_started

  mysql-zipkin:
    image: openzipkin/zipkin-mysql:2.22
    container_name: mysql-zipkin-container-bms
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: zipkin
      MYSQL_PASSWORD: zipkin
      MYSQL_DATABASE: zipkin
    volumes:
      - zipkin_mysql_data:/var/lib/mysql
    networks:
      - bms

  stripe-cli:
    image: stripe/stripe-cli:latest
    container_name: stripe-cli-container-bms
    environment:
      STRIPE_API_KEY: ${STRIPE_API_KEY_ENV}
    #     "http://orders:8080/webhook",

    command:
      [
        "listen",
        "--forward-to",
        "http://host.docker.internal:8080/orders/webhook",
      ]
    network_mode: host
    restart: unless-stopped

  stripe-cli-docker:
    image: stripe/stripe-cli:latest
    container_name: stripe-cli-docker-container-bms
    environment:
      STRIPE_API_KEY: ${STRIPE_API_KEY_ENV}
    command: [
      "listen",
      "--forward-to",
      #        "http://gateway-service:8080/orders/webhook"
      "http://nginx-gateway:80/orders/webhook",
      #        "https://nginx-gateway:443/orders/webhook",
    ]
    networks:
      - bms
    restart: unless-stopped

  # SPRING SERVICES
  config-server:
    container_name: config-server-container-bms
    image: razvanmocica/config-server-bms
    #    build:
    #      context: ./bmsSpring/config-server
    #      dockerfile: Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
      SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD: ${SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:8888/actuator/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bms
    restart: unless-stopped

  service-registry:
    container_name: service-registry-container-bms
    image: razvanmocica/service-registry-bms
    #    build:
    #      context: ./bmsSpring/service-registry
    #      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      #          SPRING_PROFILES_ACTIVE: server
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: true
      EUREKA_SERVER_EVICTION_INTERVAL_TIMER_IN_MS: 6000
      EUREKA_SERVER_PEER_NODE_READ_TIMEOUT_MS: 60000
      EUREKA_SERVER_WAIT_TIME_IN_MS_WHEN_SYNC_EMPTY: 0
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
      EUREKA_CLIENT_FETCH_REGISTRY: false
      EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS: 30
      EUREKA_CLIENT_INITIAL_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS: 30
      LOGGING_LEVEL_COM_NETFLIX_EUREKA: DEBUG
      LOGGING_LEVEL_COM_NETFLIX_DISCOVERY: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_NETFLIX_EUREKA: DEBUG
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:8761/actuator/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy

  user-service:
    #    container_name: user-service-container-bms
    #    image: razvanmocica/user-service-bms
    build:
      context: ./bmsSpring
      dockerfile: user-service.Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
      ENCODING_SECRET: ${ENCODING_SECRET}
      ENCODING_SPRING_MAIL_PASSWORD: ${ENCODING_SPRING_MAIL_PASSWORD}

      GIT_CLIENT_SECRET: ${GIT_CLIENT_SECRET}
      GIT_CLIENT_ID: ${GIT_CLIENT_ID}

      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://service-registry:8761/eureka/
      EUREKA_CLIENT_INITIALIZE_RETRY_INTERVAL_SECONDS: 10
      EUREKA_CLIENT_REGISTRATION_RETRY_INTERVAL_SECONDS: 30
      EUREKA_CLIENT_LEASE_EXPIRATION_DURATION_IN_SECONDS: 90
      EUREKA_CLIENT_LEASE_RENEWAL_INTERVAL_IN_SECONDS: 30
      LOGGING_LEVEL_COM_NETFLIX_EUREKA: DEBUG
      LOGGING_LEVEL_COM_NETFLIX_DISCOVERY: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_NETFLIX_EUREKA: DEBUG
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  comment-service:
    container_name: comment-service-container-bms
    image: razvanmocica/comment-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: comment-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  file-service:
    container_name: file-service-container-bms
    image: razvanmocica/file-service-bms
    #    build:
    #      context: ./bmsSpring/file-service
    #      dockerfile: Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - nginx-mongo-fs
      #      - zipkin
      #      - nginx-redis
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      mongo-fs:
        condition: service_started
      zipkin:
        condition: service_started
      redis:
        condition: service_started

  gateway-service:
    container_name: gateway-service-container-bms
    image: razvanmocica/gateway-service-bms
    #    build:
    #      context: ./bmsSpring/gateway-service
    #      dockerfile: Dockerfile
    #    ports:
    #      - "8080:8080"
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      zipkin:
        condition: service_started

  ingredient-service:
    container_name: ingredient-service-container-bms
    image: razvanmocica/ingredient-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: ingredient-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  kanban-service:
    container_name: kanban-service-container-bms
    image: razvanmocica/kanban-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: kanban-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  order-service:
    container_name: order-service-container-bms
    image: razvanmocica/order-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: order-service/Dockerfile
    ports:
      - "8086:8086"
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
      STRIPE_API_KEY: ${STRIPE_API_KEY_ENV}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      ENCODING_SECRET: ${ENCODING_SECRET}
      ENCODING_SPRING_MAIL_PASSWORD: ${ENCODING_SPRING_MAIL_PASSWORD}
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      #      - stripe-cli-docker

      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started
      stripe-cli-docker:
        condition: service_started
      rabbitmq:
        condition: service_started

  plan-service:
    container_name: plan-service-container-bms
    image: razvanmocica/plan-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: plan-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  post-service:
    container_name: post-service-container-bms
    image: razvanmocica/post-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: post-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  recipe-service:
    container_name: recipe-service-container-bms
    image: razvanmocica/recipe-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: recipe-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  day-service:
    container_name: day-service-container-bms
    image: razvanmocica/day-service-bms
    #    build:
    #      context: ./bmsSpring
    #      dockerfile: day-service/Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started

  websocket-service:
    container_name: websocket-service-container-bms
    image: razvanmocica/websocket-service-bms
    #    build:
    #      context: ./bmsSpring/websocket-service
    #      dockerfile: Dockerfile
    environment:
      #      SPRING_PROFILES_ACTIVE: docker
      SPRING_PROFILES_ACTIVE: server
      # SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bms
      SPRING_JPA_PROPERTIES_HIBERNATE_BOOT_ALLOW_JDBC_METADATA_ACCESS: false
      # SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      #      - config-server
      #      - service-registry
      #      - pgpool
      #      - zipkin
      #      - nginx-rabbitmq
      config-server:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      pgpool:
        condition: service_started
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_started

  ollama:
    image: ollama/ollama:0.6.7
    container_name: ollama-container-bms
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - OLLAMA_KEEP_ALIVE=-1m
      - OLLAMA_DEBUG=true
      - OLLAMA_FLASH_ATTENTION=1
    #      - OLLAMA_KV_CACHE_TYPE=q4_0
    ports:
      - "11434:11434"
    # command: ollama run yi:v1.5
    # ollama run yi:34b
    # ollama run yi:9b
    # ollama run mistral-nemo
    # ollama run mistral-nemo --keepalive -1m
    volumes:
      #      - ./ollama_models:/root/.ollama
      - ollama_fs:/root/.ollama
    networks:
      - bms
    restart: unless-stopped
    runtime: nvidia

  redis:
    image: eqalpha/keydb:latest
    container_name: redis-container-bms
    #    ports:
    #      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bms
    ports:
      - "6379:6379"
    command:
      [
        "keydb-server",
        "--appendonly",
        "yes",
        "--maxmemory",
        "2gb",
        "--maxmemory-policy",
        "allkeys-lru",
        "--server-threads",
        "2",
        "--save",
        "600",
        "1",
        "--save",
        "150",
        "10",
        "--save",
        "100",
        "6000",
      ]


  next-js:
    container_name: next-js-container-bms
    build:
      context: ./client-next
      dockerfile: Dockerfile
      args:
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_URL_INTERNAL: http://next-js:3000
        NEXT_PUBLIC_SPRING: http://host.docker.internal:8080
        NEXT_PUBLIC_SPRING_CLIENT: http://localhost:8080
        NEXT_PUBLIC_SPRING_CLIENT_WEBSOCKET: ws://localhost:8080
        OLLAMA_MODEL: gemma3:1b
        OLLAMA_BASE_URL: http://ollama:11434
        OLLAMA_EMBEDDING: bge-m3
        OLLAMA_TEMPERATURE: 0.7
        OLLAMA_CHAT_COUNT: 20
        NEXT_ZIPKIN_URL: http://zipkin:9411/api/v2/spans
        NEXT_SERVICE_NAME: next-js-bms
        NEXT_OTEL_VERBOSE: 1
        NEXT_TRACING_PROBABILITY: 0.05
        POSTGRES_HOST: postgres-vectors
        POSTGRES_PORT: 5432
        NEXT_PUBLIC_NEXTAUTH_URL: http://localhost:3000
        ASSETS_PREFIX_URL: local
        NODE_ENV: production
        CACHE_HANDLER_REDIS_URL: redis://redis:6379/10
        NEXT_AUTH_SECRET: ${NEXTAUTH_SECRET}
        ENABLE_COMPRESSION: "true"
    environment:
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_URL_INTERNAL: http://next-js:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_SERVICE_NAME: ${NEXT_SERVICE_NAME}
      NEXT_ZIPKIN_URL: http://zipkin:9411/api/v2/spans
      NEXT_OTEL_VERBOSE: ${NEXT_OTEL_VERBOSE}
      NEXT_TRACING_PROBABILITY: ${NEXT_TRACING_PROBABILITY}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      OLLAMA_MODEL: gemma3:1b
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_EMBEDDING: bge-m3
      LANGCHAIN_CACHE_REDIS_DB: ${LANGCHAIN_CACHE_REDIS_DB}
      LANGCHAIN_CACHE_REDIS_HOST: redis
      LANGCHAIN_CACHE_REDIS_PORT: 6379
      LANGCHAIN_CACHE_REDIS_TTL: 300
      POSTGRES_HOST: postgres-vectors
      POSTGRES_PORT: 5432
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: scrape_documents
      NODE_ENV: production
      CACHE_HANDLER_REDIS_URL: redis://redis:6379/10
      OLLAMA_NUM_CTX: 2048
      ENABLE_COMPRESSION: "true"
    ports:
      - "3000:3000"
      - "9464:9464"
    networks:
      - bms
    restart: unless-stopped

  next-static-server:
    container_name: next-static-server
    build:
      context: ./bmsSpring/next-static-server
      dockerfile: Dockerfile

      args:
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_URL_INTERNAL: http://next-js:3000
        NEXT_PUBLIC_SPRING: http://host.docker.internal:8080
        NEXT_PUBLIC_SPRING_CLIENT: http://localhost:8080
        NEXT_PUBLIC_SPRING_CLIENT_WEBSOCKET: ws://localhost:8080
        OLLAMA_MODEL: gemma3:1b
        OLLAMA_BASE_URL: http://ollama:11434
        OLLAMA_EMBEDDING: bge-m3
        OLLAMA_TEMPERATURE: 0.7
        OLLAMA_CHAT_COUNT: 20
        NEXT_ZIPKIN_URL: http://zipkin:9411/api/v2/spans
        NEXT_SERVICE_NAME: next-js-bms
        NEXT_OTEL_VERBOSE: 1
        NEXT_TRACING_PROBABILITY: 0.05
        POSTGRES_HOST: postgres-vectors
        POSTGRES_PORT: 5432
        NEXT_PUBLIC_NEXTAUTH_URL: http://localhost:3000
        ASSETS_PREFIX_URL: local
        NODE_ENV: production
        CACHE_HANDLER_REDIS_URL: redis://redis:6379/10
        NEXT_AUTH_SECRET: ${NEXTAUTH_SECRET}
        ENABLE_COMPRESSION: "true"
    environment:
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_URL_INTERNAL: http://next-js:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_SERVICE_NAME: ${NEXT_SERVICE_NAME}
      NEXT_ZIPKIN_URL: http://zipkin:9411/api/v2/spans
      NEXT_OTEL_VERBOSE: ${NEXT_OTEL_VERBOSE}
      NEXT_TRACING_PROBABILITY: ${NEXT_TRACING_PROBABILITY}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      OLLAMA_MODEL: gemma3:1b
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_EMBEDDING: bge-m3
      LANGCHAIN_CACHE_REDIS_DB: ${LANGCHAIN_CACHE_REDIS_DB}
      LANGCHAIN_CACHE_REDIS_HOST: redis
      LANGCHAIN_CACHE_REDIS_PORT: 6379
      LANGCHAIN_CACHE_REDIS_TTL: 300
      POSTGRES_HOST: postgres-vectors
      POSTGRES_PORT: 5432
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: scrape_documents
      NODE_ENV: production
      CACHE_HANDLER_REDIS_URL: redis://redis:6379/10
      OLLAMA_NUM_CTX: 2048
      ENABLE_COMPRESSION: "true"
      SPRING_CONFIG_IMPORT: configserver:http://host.docker.internal:8888
      #      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://host.docker.internal:8761/eureka/
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
      EUREKA_CLIENT_ENABLED: false
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 0
      APP_STATIC_PATH: file:data/static/

    ports:
      - "8094:8094"
    networks:
      - bms
    restart: unless-stopped
  #    depends_on:
  #      - nginx-gateway
  #      - ollama
  #      - pgpool-vectors

  nginx-gateway:
    image: nginx:latest
    container_name: nginx-gateway-container-bms
    environment:
      HTTP_PORT: 8080
      HTTPS_PORT: 8443
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/gateway.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/certs:/etc/nginx/ssl
    command: >
      /bin/sh -c "
      echo 'Waiting for gateway-service to be healthy...' &&
              while ! curl -s http://gateway-service:8080/actuator/health | grep '\"status\":\"UP\"'; do
                echo 'gateway-service is not healthy yet, retrying in 5 seconds...';
                sleep 5;
              done &&
      echo 'gateway-service is healthy!' &&
        if [ ! -f /etc/nginx/ssl/selfsigned.crt ]; then
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/selfsigned.key -out /etc/nginx/ssl/selfsigned.crt -subj '/CN=im51.go.ro';
        fi &&
        envsubst '\$${HTTP_PORT} \$${HTTPS_PORT}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf &&
        nginx -g 'daemon off;'"
    networks:
      - bms
    restart: unless-stopped
    depends_on:
      - gateway-service
  
  
  
  nginx-files:
    image: nginx:latest
    container_name: nginx-files-container-bms
    ports:
      - "8180:80"
      - "8943:443"
    volumes:
      - ./nginx/files.conf:/etc/nginx/nginx.conf
    networks:
      - bms
    restart: unless-stopped


  nginx-nextjs:
    image: nginx:latest
    container_name: nginx-nextjs-container-bms
    environment:
      HTTP_PORT: 3000
      HTTPS_PORT: 3443
    ports:
      - "3000:81"
      - "443:444"
    volumes:
      - ./nginx/nextjs.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/certs:/etc/nginx/ssl
      - /var/cache/nginx:/var/cache/nginx
    networks:
      - bms
    restart: unless-stopped
    command: >
      /bin/sh -c "
      echo 'Waiting for next-js to be ready...' &&
              while ! curl -s http://next-js:3000/en > /dev/null; do
                echo 'next-js is not ready yet, retrying in 5 seconds...';
                sleep 5;
              done &&
      echo 'next-js is ready!' &&
        if [ ! -f /etc/nginx/ssl/selfsigned.crt ]; then
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/selfsigned.key -out /etc/nginx/ssl/selfsigned.crt -subj '/CN=im51.go.ro';
        fi &&
        envsubst '\$${HTTP_PORT} \$${HTTPS_PORT}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf &&
        nginx -g 'daemon off;'"
    depends_on:
      - next-js

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-container-bms
    ports:
      #      - "5672:5672"
      - "15672:15672"
      - "5672:5672" # Expose AMQP proxy
      - "61613:61613"
    #      - "61613:61613"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/erl.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - bms
    restart: unless-stopped
    healthcheck:
      test: "rabbitmq-diagnostics -q ping"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 3g
    command: >
      bash -c "
      rabbitmq-plugins enable rabbitmq_stomp &&
      rabbitmq-plugins enable rabbitmq_web_stomp &&
      rabbitmq-server"
  
  
  diffusion:
    build:
      context: ./diffusion
      dockerfile: Dockerfile
    container_name: diffusion-container-bms
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - PYTHON_PROFILES_ACTIVE=docker
      - CUDA_LAUNCH_BLOCKING=1
      #      - ZIPKIN_SAMPLE_RATE=1
      #      - LOKI_URL=http://host.docker.internal:3100/loki/api/v1/push
      #      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
    ports:
      - "5000:5000"
    volumes:
      - diffusion_fs:/home/appuser/model-cache
    networks:
      - bms
    runtime: nvidia

  time-series:
    build:
      context: ./timeSeriesChronos
      dockerfile: Dockerfile
    container_name: time-series-container-bms
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - PYTHON_PROFILES_ACTIVE=docker
      - CUDA_ENABLED=true
      #      - ZIPKIN_SAMPLE_RATE=1
      #      - LOKI_URL=http://host.docker.internal:3100/loki/api/v1/push
      #      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
    ports:
      - "5001:5001"
    volumes:
      - timeseries_fs:/home/appuser/model-cache
    networks:
      - bms
    depends_on:
      - redis
    runtime: nvidia

  toxic-prediction:
    build:
      context: ./toxicPrediction
      dockerfile: Dockerfile
    container_name: toxic-prediction-container-bms
    environment:
      - PYTHON_PROFILES_ACTIVE=docker
      #      - ZIPKIN_SAMPLE_RATE=1
      #      - LOKI_URL=http://host.docker.internal:3100/loki/api/v1/push
      #      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
    ports:
      - "5002:5002"
    volumes:
      - toxic_fs:/home/appuser/hf-cache
    networks:
      - bms
    depends_on:
      - redis

  archive-service:
    container_name: archive-service-container-bms
    build:
      context: ./bmsSpring/archive-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: server
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://host.docker.internal:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
      EUREKA_CLIENT_FETCH_REGISTRY: false
      SPRING_CLOUD_DISCOVERY_ENABLED: false
      SPRING_CONFIG_IMPORT: configserver:http://host.docker.internal:8888
    ports:
      - "8092:8092"
    networks:
      - bms
#    restart: unless-stopped

volumes:
  postgres_data:
  postgres_data_messages:
  postgres_data_vectors:
  mongo_data:
  redis_data:
  rabbitmq_data:
  ollama_fs:
  pgadmin_data:
  diffusion_fs:
  zipkin_mysql_data:
  timeseries_fs:
  toxic_fs:
networks:
  bms:
    driver: bridge
#net stop winnat
#net start winnat